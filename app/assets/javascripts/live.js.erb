//= require confetti.min

console.log("Ha you're funny, looking under the hood")
$(document).ready(function() {
  // var last_theme = darkTheme;
  // $(".diamond").click(function(){
  //   console.log(last_theme);
  //
  // });

  var last_p = 1;

  $('article').click(function() {
    current = $(this);
    $("article").removeClass("active-q");
    $(".a-hline").removeClass("hide");

    current.addClass("active-q");
    current.prev().addClass("hide");
    current.next().addClass("hide");

    $("#answers p:nth-child(" + last_p + ")").fadeOut("fast", function() {
      $("#answers p:nth-child(" + current.children().attr("id") + ")").fadeIn();
    });

    last_p = current.children().attr("id")
  });

  $('#questions').on('scroll', function() {
    if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight) {
      $(".fa-angle-down").fadeOut();
    } else {
      $(".fa-angle-down").fadeIn();
    }

    if ($(this).scrollTop() == 0) {
      $(".fa-angle-up").fadeOut();
    } else {
      $(".fa-angle-up").fadeIn();
    }
  })

  totalHeight = 0
  $("#questions").children().each(function() {
    totalHeight = totalHeight + $(this).outerHeight(true);
  });

  if (totalHeight < $("#questions").height()) {
    $(".fa-angle-up").fadeOut();
    $(".fa-angle-down").fadeOut();
  } else {
    $(".fa-angle-up").fadeOut();
  }

  chev_left = 1
  chev_right = 0
  $('#wrap-announce').on('scroll', function() {
    if ($(this).scrollLeft() == 0) {
      $('#chevron-wrap-left').animate({"width":"0"}, "slow")
      chev_left = 1

      $(".fa-chevron-left").fadeOut();
    } else if ($(this).scrollLeft() > ($(this).width() - $(this).width())) {
      if (chev_left == 1) {
        $('#chevron-wrap-left').animate({"width":"50px"}, "slow")
        chev_left = 0
      }
      $(".fa-chevron-left").fadeIn();
    }

    if ($(this).scrollLeft() == ($(this)[0].scrollWidth - $(this).width()) ) {
      $('#chevron-wrap-right').animate({"width":"0"}, "slow")
      chev_right = 1
      $(".fa-chevron-right").fadeOut();
    } else {
      if (chev_right == 1) {
        $('#chevron-wrap-right').animate({"width":"50px"}, "slow")
        chev_right = 0
      }
      $(".fa-chevron-right").fadeIn();
    }
  })

  $('.fa-chevron-left').click(function() {
    $('#wrap-announce').animate({
      scrollLeft: 0
    }, 800);
  });

  $('.fa-chevron-right').click(function() {
    $('#wrap-announce').animate({
      scrollLeft: $('#wrap-announce').scrollLeft() + 470
    }, 800);
  });

  $("#day-schedule-wrap > div").each(function(i) {
    if ($(this).hasClass("schedule-item")) {
      left = $(this).find(".left-wrap").height()
      right = $(this).find(".right-wrap").height()

      if (left > right) {
        $(this).find(".right-wrap").height(left);
      } else {
        $(this).find(".left-wrap").height(right);
      }
    }
  });

  $(".hardware-inner > .inner-wrap").each(function(i) {
    $(this).find(".name-wrap >.lender").height($(this).parent().height() - 20);
  });

  $(".section-title-live").height("40px")




  var days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
  now = new Date();

  if (days[now.getDay()] == "saturday" || days[now.getDay()] == "sunday") {
    parentDate = $("#day-schedule-wrap")
    childDay = $("#" + days[now.getDay()] + "")
    parentDate.animate({
      scrollTop: $("#day-schedule-wrap").scrollTop() + childDay.position().top - 160 - parentDate.height() / 2 + childDay.height() / 2
    }, 1000);
  }

  var confetti_count = 0;

  function getTimeRemaining(endtime) {
    var t = Date.parse(endtime) - Date.parse(new Date());
    var seconds = Math.floor((t / 1000) % 60);
    var minutes = Math.floor((t / 1000 / 60) % 60);
    var hours = Math.floor((t / (1000 * 60 * 60)) % 24);
    var days = Math.floor(t / (1000 * 60 * 60 * 24));
    return {
      'total': t,
      'days': days,
      'hours': hours,
      'minutes': minutes,
      'seconds': seconds
    };
  }

  function initializeClock(id, endtime) {
    var clock = document.getElementById(id);
    var daysSpan = clock.querySelector('.days');
    var hoursSpan = clock.querySelector('.hours');
    var minutesSpan = clock.querySelector('.minutes');
    var secondsSpan = clock.querySelector('.seconds');

    function updateClock() {
      var t = getTimeRemaining(endtime);

      var d = new Date();
      var n = d.getTime();

      if ((n >= 1485104400000) && (confetti_count == 0)) {
        StartConfetti();
        confetti_count = 1;
        $("#clockdiv p").html("Hacking has ended!");
        $("#clockdiv div").remove();
      } else if (n >= 1484974800000) {
        $("#clockdiv p").html("Hacking ends in");
        var deadline = new Date(1485104400000);
        t = getTimeRemaining(deadline);

      }


      if (t.total > 0) {
        $("#clockdiv p").attr("style", "");
      }
      if (t.total < 3600 * 1000) {
        $("#clockdiv div").attr("style", "animation: fade-in-out 1.2s infinite;");
        $("#clockdiv div span").attr("style", "color: #F3464A !important;");
        $("#clockdiv div.smalltext").attr("style", "color: #F3464A !important;");
      } else {
        $("#clockdiv div span").attr("style", "");
        $("#clockdiv div.smalltext").attr("style", "");
      }

      daysSpan.innerHTML = t.days;
      hoursSpan.innerHTML = ('0' + t.hours).slice(-2);
      minutesSpan.innerHTML = ('0' + t.minutes).slice(-2);
      secondsSpan.innerHTML = ('0' + t.seconds).slice(-2);

      if (t.total <= 0) {
        clearInterval(timeinterval);
      }
    }

    updateClock();
    var timeinterval = setInterval(updateClock, 1000);
  }

  var deadline = new Date(1484974800000);
  initializeClock('clockdiv', deadline);

  function refreshAnnouncements() {
    $.ajax({
      url: "/push",
      type: "GET",
      dataType: 'jsonp',
      success: function(data) {
        if (data.error || (!data.description && !data.title) ) {
          console.error('The API returned an error.', data.error);
          // throw new Error();
        }

        dark = ""
        if (darkTheme) {
          dark = " dark"
        }

        if ( $.trim(data.description) !== $.trim($("#wrap-announce > :first-child > .inner-wrap > .description").html()) ) {
          announcement = '<div class="announcement">\
                <div class="inner-wrap">\
                  <div class="title-wrap'+dark+'">\
                    <div class="title">' + data.title + '</div>\
                    <div class="time">' + data.time + '</div>\
                  </div>\
                  <div class="description'+dark+'">' + data.description + '</div>\
                </div>\
              </div>'
          $('#wrap-announce').prepend(announcement)
        }
      }
    });
  }

  refreshAnnouncements();
	setInterval(refreshAnnouncements, 10000); // invoke each 10 seconds

  function getCookie(cname) {
      var name = cname + "=";
      var decodedCookie = decodeURIComponent(document.cookie);
      var ca = decodedCookie.split(';');
      for(var i = 0; i <ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
              c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
              return c.substring(name.length, c.length);
          }
      }
      return "";
  }

  function setCookie(cname, cvalue, exdays) {
      var d = new Date();
      d.setTime(d.getTime() + (exdays*24*60*60*1000));
      var expires = "expires="+ d.toUTCString();
      document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
  }

  $('.push i').click(function(){
    if (getCookie('push') == "") {
      setCookie("push", "1", "100");
    }
    document.querySelector('.js-push-button').textContent = "Enable Push Messages";
    $('.push').slideUp();
  })

  var isPushEnabled = false;

  window.addEventListener('load', function() {
    var pushButton = document.querySelector('.js-push-button');
    $(".js-push-button").on('click', function() {
      if (isPushEnabled) {
        unsubscribe();
      } else {
        subscribe();
      }
    });

    // Check that service workers are supported, if so, progressively
    // enhance and add push messaging support, otherwise continue without it.
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('/serviceworker.js')
        .then(initialiseState);
    } else {
      $('.push').remove();
      console.warn('Service workers aren\'t supported in this browser.');
    }
  });

  // Once the service worker is registered set the initial state
  function initialiseState() {
    // Are Notifications supported in the service worker?
    if (!('showNotification' in ServiceWorkerRegistration.prototype)) {
      console.warn('Notifications aren\'t supported.');
      return;
    }

    // Check the current Notification permission.
    // If its denied, it's a permanent block until the
    // user changes the permission
    if (Notification.permission === 'denied') {
      console.warn('The user has blocked notifications.');
      $('.push').remove();
      return;
    }

    // Check if push messaging is supported
    if (!('PushManager' in window)) {
      console.warn('Push messaging isn\'t supported.');
      return;
    }

    // We need the service worker registration to check for a subscription
    navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {
      // Do we already have a push message subscription?
      serviceWorkerRegistration.pushManager.getSubscription()
        .then(function(subscription) {
          // Enable any UI which subscribes / unsubscribes from
          // push messages.
          var pushButton = document.querySelector('.push');
          if( navigator.userAgent.toLowerCase().indexOf('firefox') > -1 ){
            $('.push').remove();
         } else {
           pushButton.hidden = false;
         }


          if (!subscription) {
            // We aren't subscribed to push, so set UI
            // to allow the user to enable push

            if (getCookie('push') !== "") {
              $(".push").remove();
              document.querySelector('.js-push-button').textContent = "Enable Push Messages";
            }

            return;
          }
          // Keep your server in sync with the latest subscriptionId
          sendSubscriptionToServer(subscription);

          // Set your UI to show they have subscribed for
          // push messages
          pushButton.remove();
          pushButton = document.querySelector('.js-push-button');
          pushButton.textContent = "Disable Push Messages"
          isPushEnabled = true;
        })
        .catch(function(err) {
          console.warn('Error during getSubscription()', err);
        });
    });
  }

  function subscribe() {
    // Disable the button so it can't be changed while
    // we process the permission request
    var pushButton = document.querySelector('.js-push-button');
    pushButton.disabled = true;

    navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {
      serviceWorkerRegistration.pushManager.subscribe({
          userVisibleOnly: true
        })
        .then(function(subscription) {
          // The subscription was successful
          if (getCookie('push') == "") {
            setCookie("push", "1", "100");
          }
          isPushEnabled = true;
          pushButton = document.querySelector('.js-push-button');
          pushButton.textContent = 'Disable Push Messages';
          pushButton.disabled = false;

          // TODO: Send the subscription.endpoint to your server
          // and save it to send a push message at a later date
          if ($('.push')) { $('.push').slideUp(); }
          return sendSubscriptionToServer(subscription);
        })
        .catch(function(e) {
          if (Notification.permission === 'denied') {
            // The user denied the notification permission which
            // means we failed to subscribe and the user will need
            // to manually change the notification permission to
            // subscribe to push messages
            console.warn('Permission for Notifications was denied');
            $('.push').fadeOut('slow');
            pushButton.disabled = true;
          } else {
            // A problem occurred with the subscription; common reasons
            // include network errors, and lacking gcm_sender_id and/or
            // gcm_user_visible_only in the manifest.
            console.error('Unable to subscribe to push.', e);
            pushButton = document.querySelector('.js-push-button');
            $(".push").slideUp();
            if (getCookie('push') == "") {
              setCookie("push", "1", "100");
            }
            pushButton.disabled = false;
            pushButton.textContent = 'Enable Push Messages';
          }
        });
    });
  }

  function unsubscribe() {
    var pushButton = document.querySelector('.js-push-button');
    pushButton.disabled = true;

    navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {
      // To unsubscribe from push messaging, you need get the
      // subscription object, which you can call unsubscribe() on.
      serviceWorkerRegistration.pushManager.getSubscription().then(
        function(pushSubscription) {
          // Check we have a subscription to unsubscribe
          if (!pushSubscription) {
            // No subscription object, so set the state
            // to allow the user to subscribe to push
            isPushEnabled = false;
            pushButton.disabled = false;
            pushButton.textContent = 'Enable Push Messages';
            return;
          }

          var subscriptionId = pushSubscription.subscriptionId;
          $.ajax({
            url: "/push/unsubscribe",
            data: {token: subscriptionId},
            type: "POST",
            success: function(data) {
            }
          });

          // We have a subscription, so call unsubscribe on it
          pushSubscription.unsubscribe().then(function(successful) {
            pushButton.disabled = false;
            pushButton.textContent = 'Enable Push Messages';
            isPushEnabled = false;
          }).catch(function(e) {
            // We failed to unsubscribe, this can lead to
            // an unusual state, so may be best to remove
            // the users data from your data store and
            // inform the user that you have done so

            console.log('Unsubscription error: ', e);
            pushButton.disabled = false;
            pushButton.textContent = 'Enable Push Messages';
          });
        }).catch(function(e) {
        console.error('Error thrown while unsubscribing from push messaging.', e);
      });
    });
  }

  function sendSubscriptionToServer(id) {
    $.ajax({
      url: "/push/subscribe",
      data: {token: id.endpoint},
      type: "POST",
      success: function(data) {
      }
    });
  }
});
